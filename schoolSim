class School: #main school class
    name = None
    headTeacher = None
    yearGroup = [] #list to hold the year group classes 
    numberOfStudents = 0
    numberOfTeachers = 0

    def __init__(self, schoolName, headTeacher):
        self.name = schoolName
        self.headTeacher = headTeacher

    def __repr__(self):
        description = "Welcome to {school}. I am {headTeacher}, the Head Teacher. There are currently {students} student(s) and {teachers} teacher(s) here".format(school = self.name, headTeacher = self.headTeacher, students = self.numberOfStudents, teachers = self.numberOfTeachers)
        return description

    def addYearGroup(self, yg): #add instance of YearGroup to the years list
        self.yearGroup.append(yg)
        self.numberOfStudents += yg.numberOfStudents

    def createYearGroup(self, year, hof): #creates and addes the yeargroup to the list yearGroups which holds the year groups found at the school
        new = YearGroup(year, hof)
        self.addYearGroup(new)
        print("Added {year} to the school".format(year=self.yearGroup[-1].__repr__()))
    
    
    def selectYearGroup(self, year):
        for yg in self.yearGroup:
            if yg.year == year:
                return yg
        
        print("Year " + str(year) + " was not found")
    
    def deleteYearGroup(self, year): #checks the list of years and compares with the attribute year to select the required year and delete it 
        for yg in self.yearGroup: #!!! UPDATE - can use the method selectYearGroup to shorten this code !!!
            if yg.year == year:
                self.yearGroup.remove(yg)
                print("Year group " + str(year) + " has been removed")
                return  #stops the method if deleted

        print("Year group was not found")

    def displayYears(self):
        if len(self.yearGroup) == 0:
            print('There are currently no year groups.')

        for i in range(len(self.yearGroup)):
            print(self.yearGroup[i].__repr__())


class YearGroup: #class to hold year group information
    year = None
    headOfYear = None
    numberOfStudents = 0
    forms = []
    classrooms = []

    def __init__(self, year, hof):
        self.year = year
        self.headOfYear = hof
    
    def __repr__(self): #This will be the representation of the instance in a list
        return "Year" + str(self.year)
    
    def __str__(self): #This will be the description when yeargroup is printed 
        description = "This is year {year}. I am the head of year {hof}. There are {students} students and {forms} different form groups".format(year = self.year, hof = self.headOfYear, students = self.numberOfStudents,forms = len(self.forms))
        return description
    
    def createClassroom(self, newName, newSubject):
        new = Classroom(newName, newSubject)
        if newSubject == 'form': #if statement which will assign the classroom to the correct list
            self.addForm(new)
        else:
            self.addClassroom(new)
    
    def addClassroom(self, cRoom): #handles the adding of classrooms to the list and updating student count
        self.classrooms.append(cRoom)
        self.numberOfStudents += cRoom.studentCount
    
    def addForm(self, form):
        self.forms.append(form)
        #Need to correctly implement student count with overlapping classes
    
    def deleteClassroom(self, inputClassroom): #handles deletion of a class whether it is in the forms or classroom list. Classes should not be called the same thing.
        for classroom in self.classrooms:
            if classroom.name == inputClassroom:
                self.classrooms.remove(classroom)
                print('Classroom ' + inputClassroom + ' deleted.')
                return

        for form in self.forms:
            if form.name == inputClassroom:
                self.forms.remove(form)
                print('Form group ' + inputClassroom + ' deleted.')
                return  #return to stop the print below from outputting as well

        print('Classroom/Form' + inputClassroom + ' not found.')        
    

    def displayClasses(self):
        if len(self.classrooms) == 0:
            print('No classes in this year group!')
            return 

        for i in range(len(self.classrooms)):
            print(self.classrooms[i].__repr__())
    
    def displayForms(self):
        if len(self.forms) == 0:
            print('No forms in this year group')
            return

        for i in range(len(self.forms)):
            print(self.forms[i].__repr__()) #__repr__ used so only the variable name is outputted when printing instead of the __str__
    
    def selectClass(self, classroom): #selects specific class and forms from lists 
        for cl in self.classrooms:
            if cl.name == classroom:
                return cl
        
        print('Class ' + classroom + ' was not found.') #runs this if the if statment is not met
    
    def selectForm(self, form):
        for f in self.forms:
            if f.name == form:
                return f
    
        print('Form ' + form + ' was not found.')

class Classroom:
    name = None
    teacher = None
    subject = None
    studentCount = 0 #can make this so it is pre defined and limits the class to that amount of students
    students = []

    def __init__(self, name, subject):
        self.name = name
        self.subject = subject

    def __repr__(self):
        return self.name.upper()
    
    def __str__(self):
        description = "Welcome to class {name}. This is a {subject} class".format(name=self.name, subject=self.subject)
        return description
    
    def createStudent(self, name, surname, age): #Add student to the students list for the class
        newStudent = Student(name, surname, age)
        self.students.append(newStudent)
        self.studentCount += 1
    
    def selectStudent(self, student):
        for s in self.students:
            if s.name == student:
                return s

    def displayClass(self):
        for i in range(len(self.students)):
            print(self.students[i].__repr__())


class Student:
    firstname = None
    surname = None
    age = None
    birthday = None
    inClass = []
    inYear = 0

    def __init__(self, firstname, surname, age):
        self.firstname = firstname
        self.surname = surname
        self.age = age

    def __repr__(self):
        return self.firstname + ' ' + self.surname       
    
    def __str__(self):
        description = "Hi my name is {first} {second}. I am {age} years old and in year {}"


#main loop

def main(): 

    print('Welcome to the School Management System!')
    
    nameVerify = False  #These statements will allow the user to re enter information if the program does not deem the inputs valid
    schoolVerify = False
    while nameVerify == False:
        userName = input('You will be the Head Teacher of this School, Please enter your name: ')

        if isinstance(userName, str):
            nameVerify = True
        else:
            print('Please enter a valid name!')
    
    while schoolVerify == False:

        userSchool = input('What will be the name of your School: ')

        if isinstance(userSchool, str):
            schoolVerify = True
        else:
            print('Please enter a valid school name')


    school = School(userSchool, userName)
    print('School has been Successfully Created!')
    print('-----------------------------------------')
    print(school)

    quitProgram = False
    while quitProgram == False:
        
        print('School Option Menu:')
        print('1) Add a Year Group')
        print('2) Delete a Year Group')
        print('3) View All School Year Groups')
        print('4) Select a Year Group')
        print('5) Exit')

        choice = input('What would you like to do?: ')
        print('-----------------------------------------')

        if choice == '1':
            newYear = int(input('What Year would you like to add: '))
            newHof = input('Your new year group needs a Head of Year!: ')
            school.createYearGroup(newYear, newHof)
            print(school.selectYearGroup(newYear).__repr__() + ' Successfully Created!')
            print('-----------------------------------------')
        
        elif choice == '2':
            delYear = int(input('Please enter the year of the Year Group you want to delete: '))
            school.deleteYearGroup(delYear)
            print('Year ' + str(delYear) + ' Succesfully Deleted.')
            print('-----------------------------------------')
        
        elif choice == '3':
            print('These are all the Year Groups: ')
            school.displayYears()
            print('-----------------------------------------')
        
        elif choice == '4': #Add functionality here to allow the year group to be manipulated
            selYear = int(input('Enter the Year of the Year Group you would like to access: '))
            yearGroup = school.selectYearGroup(selYear)
            if yearGroup: 
                manageYG(yearGroup)


        elif choice == '5':
            print('Exiting Program')
            print('-----------------------------------------')
            quitProgram = True
        
        else:
            print('Please Enter a Valid Choice')
            print('-----------------------------------------')


def manageYG(yearGroup):
    
    print('-----------------------------------------')
    print(yearGroup)

    ygExit = False
    while ygExit == False:

        print('Year Group Option Menu')
        print('1) Create Classroom/Form')
        print('2) Delete Clasroom/Form')
        print('3) See Forms')
        print('4) See Classrooms')
        print('5) Select Classroom/Form')
        print('6) Exit')

        choice = input('What would you like to do?: ')
        print('-----------------------------------------')

        if choice == '1':
            cName = input('What will be the Classroom/Form name?: ')
            cSubject = input('What Subject will be studied in this class. If a form group, please enter "form": ')
            yearGroup.createClassroom(cName, cSubject)
            if cSubject == 'form':
                print(yearGroup.selectForm(cName).__repr__() + ' was Succesfully Created')
                print('-----------------------------------------')
            else:
                print(yearGroup.selectClass(cName).__repr__() + ' was Succesfully Created')
                print('-----------------------------------------')
        
        elif choice == '2': #Can improve this and method to allow for same name but different subjects to delete.
            delClass = input('Please enter the name of the Classroom/Form you wish to delete: ')
            yearGroup.deleteClassroom(delClass)
            print('-----------------------------------------')
        
        elif choice == '3':
            print('These are all the forms in the Year Group: ')
            yearGroup.displayForms()
            print('-----------------------------------------')
        
        elif choice == '4':
            print('These are all the Classrooms in the Year: ')
            yearGroup.displayClasses()
            print('-----------------------------------------')
        
        elif choice == '5':
            selName = input('What is the Classroom/Form name?: ')
            selSubject = input('Please enter the class Subject: ')
            if selSubject == 'form':
                selClass = yearGroup.selectForm(selName)
                if selClass:
                    manageClass(selClass)
            else:
                selClass = yearGroup.selectClass(selName)
                if selClass:
                    manageClass(selClass)

            print('-----------------------------------------')
        
        elif choice == '6':
            print('Exiting Year Group')
            print('-----------------------------------------')
            ygExit = True
        
        else:
            print('Enter a valid choice!')


def manageClass(classroom):

    print('-----------------------------------------')
    print(classroom)

    classExit = False
    while classExit == False:

        print('Class Option Menu: ')
        print('1) Add a Student')
        print('2) Remove a Student')
        print('3) See Class Students')
        print('4) Select a Student')
        print('5) Exit')

        choice = input('What would you like to do?: ')
        print('-----------------------------------------')

        if choice == '1':
            newName = input("What is the Student's Name?: ")
            newSurname = input("What is the Student's Surname?: ")
            newAge = int(input("What is the Student's Age?: "))
            classroom.createStudent(newName, newSurname, newAge)
            print(newName + ' was Succesfully Added!')
            print('-----------------------------------------')
        
        elif choice == '5':
            print('Exiting Classroom ' + classroom.name)
            classExit = True



main()
    



