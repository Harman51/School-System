class School: #main school class

    def __init__(self, schoolName, headTeacher):
        self.name = schoolName
        self.headTeacher = headTeacher
        self.yearGroup = [] #list to hold the year group classes 
        self.numberOfStudents = 0
        self.numberOfTeachers = 0

    def __repr__(self):
        description = "Welcome to {school}. I am {headTeacher}, the Head Teacher. There are currently {students} student(s) and {teachers} teacher(s) here".format(school = self.name, headTeacher = self.headTeacher, students = self.numberOfStudents, teachers = self.numberOfTeachers)
        return description

    def addYearGroup(self, yg): #add instance of YearGroup to the years list
        self.yearGroup.append(yg)
        self.numberOfStudents += yg.numberOfStudents

    def createYearGroup(self, year, hof): #creates and addes the yeargroup to the list yearGroups which holds the year groups found at the school
        new = YearGroup(year, hof)
        self.addYearGroup(new)
        print("Added {year} to the school".format(year=self.yearGroup[-1].__repr__()))
    
    
    def selectYearGroup(self, year):
        for yg in self.yearGroup:
            if yg.year == year:
                return yg
        
        print("Year " + str(year) + " was not found")
    
    def deleteYearGroup(self, year): #checks the list of years and compares with the attribute year to select the required year and delete it 
        for yg in self.yearGroup: #!!! UPDATE - can use the method selectYearGroup to shorten this code !!!
            if yg.year == year:
                self.yearGroup.remove(yg)
                print("Year group " + str(year) + " has been removed")
                return  #stops the method if deleted

        print("Year group was not found")

    def displayYears(self):
        if len(self.yearGroup) == 0:
            print('There are currently no year groups.')

        for i in range(len(self.yearGroup)):
            print(self.yearGroup[i].__repr__())


class YearGroup: #class to hold year group information

    def __init__(self, year, hof):
        self.year = year
        self.headOfYear = hof
        self.numberOfStudents = 0
        self.forms = []
        self.classrooms = []
    
    def __repr__(self): #This will be the representation of the instance in a list
        return "Year" + str(self.year)
    
    def __str__(self): #This will be the description when yeargroup is printed 
        description = "This is year {year}. I am the head of year {hof}. There are {students} students and {forms} different form groups".format(year = self.year, hof = self.headOfYear, students = self.numberOfStudents,forms = len(self.forms))
        return description
    
    def createClassroom(self, newName, newSubject):
        new = Classroom(newName, newSubject)
        if newSubject == 'form': #if statement which will assign the classroom to the correct list
            self.addForm(new)
        else:
            self.addClassroom(new)
    
    def addClassroom(self, cRoom): #handles the adding of classrooms to the list and updating student count
        self.classrooms.append(cRoom)
        self.numberOfStudents += cRoom.studentCount
    
    def addForm(self, form):
        self.forms.append(form)
        #Need to correctly implement student count with overlapping classes
    
    def deleteClassroom(self, inputClassroom): #handles deletion of a class whether it is in the forms or classroom list. Classes should not be called the same thing.
        for classroom in self.classrooms:
            if classroom.name == inputClassroom:
                self.classrooms.remove(classroom)
                print('Classroom ' + inputClassroom + ' deleted.')
                return

        for form in self.forms:
            if form.name == inputClassroom:
                self.forms.remove(form)
                print('Form group ' + inputClassroom + ' deleted.')
                return  #return to stop the print below from outputting as well

        print('Classroom/Form' + inputClassroom + ' not found.')        
    

    def displayClasses(self):
        if len(self.classrooms) == 0:
            print('No classes in this year group!')
            return 

        for i in range(len(self.classrooms)):
            print(self.classrooms[i].__repr__())
    
    def displayForms(self):
        if len(self.forms) == 0:
            print('No forms in this year group')
            return

        for i in range(len(self.forms)):
            print(self.forms[i].__repr__()) #__repr__ used so only the variable name is outputted when printing instead of the __str__
    
    def selectClass(self, classroom): #selects specific class and forms from lists 
        for cl in self.classrooms:
            if cl.name == classroom:
                return cl
        
        print('Class ' + classroom + ' was not found.') #runs this if the if statment is not met
    
    def selectForm(self, form):
        for f in self.forms:
            if f.name == form:
                return f
    
        print('Form ' + form + ' was not found.')

class Classroom:

    def __init__(self, name, subject):
        self.name = name
        self.subject = subject
        self.teacher = None
        self.studentCount = 0 #can make this so it is pre defined and limits the class to that amount of students
        self.students = []

    def __repr__(self):
        return self.name
    
    def __str__(self):
        description = "Welcome to class {name}. This is a {subject} class".format(name=self.name, subject=self.subject)
        return description
    
    def createStudent(self, name, surname, age): #Add student to the students list for the class
        newStudent = Student(name, surname, age)
        self.students.append(newStudent)
        self.studentCount += 1
    
    def selectStudent(self, student):
        for s in self.students:
            if s.name == student:
                return s

    def displayClass(self):
        if len(self.students) == 0:
            print('No students in the class!')
            return
        
        for i in range(len(self.students)):
            print(self.students[i].__repr__())


class Student:

    def __init__(self, firstname, surname, age):
        self.firstname = firstname
        self.surname = surname
        self.age = age
        self.birthday = None
        self.inClass = []
        self.inYear = 0

    def __repr__(self):
        return self.firstname + ' ' + self.surname       
    
    def __str__(self):
        description = "Hi my name is {first} {second}. I am {age} years old and in year {}"
        return description

class commandInterpreter:
    
    commands = {
            'add year <yearnumber>': 'Adds a year group to the school.',
            'select year <yearnumber>': 'Selects a year group to manage.',
            'delete year <yearnumber>': 'Deletes a year group from the school.',
            'view years': 'Displays all years in the school',
            'add class <name>': 'Adds a classroom to the selected year group.',
            'select class <name>': 'Selects a classroom to manage.',
            'delete class <name>': 'Deletes a classroom from the selected year group.',
            'view forms/classes': 'View all forms/classrooms in the year',
            'exit': 'Exits the command interpreter.'
        }
    
    def __init__(self, school):
        self.school = school
        self.yearGroup = None
        self.classroom = None
    
    def displaySelections(self): #allow the user to see what is currently selected
        year = f"Year Group: {self.yearGroup.year}" if self.yearGroup else "Year Group: None"
        class_form = f"Class/Form: {self.classroom.name}" if self.classroom else "Class/Form: None"
        print(f"\nCurrent Selection -> {year} | {class_form}")


    def displayOptions(self):
        print("Available Commands:")
        for command, description in self.commands.items():
            print(f"- {command}: {description}")
        print()  # Extra line for readability

    def interpret(self, command):
        parts = command.lower().split() #allows users to write in any case and still properly handle commands

        if not parts:
            print('Enter a valid command! ')
            return
        
        action = parts[0] #this will take the actual command word

        if action == 'add':
            if len(parts) == 3 and parts[1] == 'year':
                year = int(parts[2])
                hof = input('Enter the Head Of Year ' + str(year) + ': ')
                self.school.createYearGroup(year, hof)
                print(self.school.selectYearGroup(year).__repr__() + ' Successfully Created!')
            elif len(parts) == 3 and parts[1] == 'class':  
                if self.yearGroup: #checks if we have previously selected a year and is saved in yearGroup
                    cName = parts[2]
                    cSubject = input('What Subject will be studied in this class. If a form group, please enter "form": ')
                    self.yearGroup.createClassroom(cName, cSubject)
                    if cSubject == 'form':
                        print(self.yearGroup.selectForm(cName).__repr__() + ' was Succesfully Created')
                    else:
                        print(self.yearGroup.selectClass(cName).__repr__() + ' was Succesfully Created')
                else:
                    print('No Year Group Selected! ')
            
            elif len(parts) == 2 and parts[1] == 'student':
                if self.classroom:
                    newName = input("What is the Student's Name?: ")
                    newSurname = input("What is the Student's Surname?: ")
                    newAge = int(input("What is the Student's Age?: "))
                    self.classroom.createStudent(newName, newSurname, newAge)
                    print(newName + ' was Succesfully Added!')
                else:
                    print('No Classroom/Form selected')

            
            else:
                print('Invalid Command. Please use the format "add year <yearnumber> or "add class <classname>".')
            
        elif action == 'delete':
            if len(parts) == 3 and parts[1] == 'year':
                year = int(parts[2])
                self.school.deleteYearGroup(year)
                print('Year ' + str(year) + ' Succesfully Deleted.')
            
            elif len(parts) == 3 and parts[1] == 'class': #can update this to delete classes based on name and subject
                if self.yearGroup:
                    delClass = parts[2]
                    self.yearGroup.deleteClassroom(delClass)
                else:
                    print('No Year Group Selected! ')
            
            elif len(parts) == 2 and parts[1] == 'student':
                if self.classroom:
                    pass #need to add a method to remove student from a class.

                else:
                    print('No Classroom/Form Selected.')

            else: 
                print('Invalid Command. Please use the format "delete year <yearnumber>" or "delete class <classname>".')
        
        elif action == 'view':
            if len(parts) == 2 and parts[1] == 'years':
                print('These are all the Year Groups: ')
                self.school.displayYears()
            elif len(parts) == 2 and parts[1] == 'classes':
                if self.yearGroup:
                    print('These are all the Classes: ')
                    self.yearGroup.displayClasses()
                else:
                    print('No Year Group Selected! ')
            elif len(parts) == 2 and parts[1] == 'forms':
                if self.yearGroup:
                    print('These are all the Forms:')
                    self.yearGroup.displayForms()
                else:
                    print('No Year Group Selected! ')
            
            elif len(parts) == 2 and parts[1] == 'students':
                if self.classroom:
                    print('Students in Class ' + self.classroom.name + ': ')
                    self.classroom.displayClass()
                else:
                    print('No Class/Form Selected')

            else:
                print('Invalid Command. Please use the format "view (years/forms/classes".')
        
        elif action == 'select':
            if len(parts) == 3 and parts[1] == 'year':
                year = int(parts[2])
                self.yearGroup = self.school.selectYearGroup(year)
                if self.yearGroup:
                    print('Year ' + str(year) + ' Selected')
            
            elif len(parts) == 3 and parts[1] == 'class':
                if self.yearGroup:
                    selName = parts[2]
                    selSubject = input('Please enter the class Subject: ')
                    if selSubject == 'form':
                        self.classroom = self.yearGroup.selectForm(selName)
                        if self.classroom:
                            print('Form ' + selName + ' Selected')
                    else:
                        self.classroom = self.yearGroup.selectClass(selName)
                        if self.classroom:
                            print('Classroom ' + selName + ' Selected')
                else:
                    print('No Year Group Selected! ')
            
            elif len(parts) == 2 and parts[1] == 'student':
                if self.classroom:
                    pass #need to add student selection
                else:
                    print('No Classroom/Form Selected')
            else:
                print("Invalid 'select' command. Use 'select year <yearnumber>'.")


    


#main loop

def main(): 

    print('Welcome to the School Management System!')
    
    nameVerify = False  #These statements will allow the user to re enter information if the program does not deem the inputs valid
    schoolVerify = False
    while nameVerify == False:
        userName = input('You will be the Head Teacher of this School, Please enter your name: ')

        if isinstance(userName, str):
            nameVerify = True
        else:
            print('Please enter a valid name!')
    
    while schoolVerify == False:

        userSchool = input('What will be the name of your School: ')

        if isinstance(userSchool, str):
            schoolVerify = True
        else:
            print('Please enter a valid school name')


    school = School(userSchool, userName)
    print('School has been Successfully Created!')
    print('-----------------------------------------')
    print(school)

    interpreter = commandInterpreter(school)
    interpreter.displayOptions()
    quitProgram = False
    while quitProgram == False:
        interpreter.displaySelections()
        print()
        command = input("Enter a command (or 'exit' to quit): ").strip()
        print('-----------------------------------------')
        if command.lower() == 'exit':
            print('Exiting Program')
            quitProgram = True
        else:
            interpreter.interpret(command)
            print('-----------------------------------------')




    




main()
    



